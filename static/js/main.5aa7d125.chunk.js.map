{"version":3,"sources":["stepLogic.js","utils.js","Login.jsx","App.js","serviceWorker.js","index.js"],"names":["playStage","IN_PLAY","WIN","LOSE","stepType","A","B","C","D","playerActionType","HOLD","INVEST","WAIT","order","Map","generateNextStep","prevStepType","possibleSteps","get","count","length","Math","floor","random","stepColors","generateBool","values","stepId","newStep","isHidden","id","type","isSomething","complement","isNil","KEY","VALID_TOKEN","Login","setToken","useEffect","token","localStorage","getItem","login","useRef","password","onSubmit","loginValue","path","passwordValue","setItem","ref","WIN_SLOT_COUNT","LOSE_SLOT_COUNT","PREV_SLOT_COUNT_FOR_UPGRADE","initialState","steps","generateInitSteps","prevResult","prop","head","playedSteps","repeat","slots","prevSlots","lastPlayerActionTypePlayed","resource","slotMaximum","App","useReducer","state","firstStep","lastStep","last","hasUpgrade","hasBossUpgradeA","filter","step","hasBossUpgradeB","hasBossUpgradeC","hasBossUpgradeD","addedToSlots","slice","doubleAddedToSlots","dropLast","min","dispatch","useState","isLogged","stage","reduce","acc","slot","some","selectStage","onHoldClick","onInvestClick","onWaitClick","document","addEventListener","e","key","playedStepsInfo","className","map","style","background","stepColor","keys","items","itemId","onClick","n","slotColor","range","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5aa7d125.chunk.js","sourcesContent":["import { head, prop } from \"ramda\"\r\n\r\n\r\nexport const playStage = {\r\n    IN_PLAY: 'IN_PLAY',\r\n    WIN: 'WIN',\r\n    LOSE: 'LOSE'\r\n}\r\n\r\nexport const stepType = {\r\n    A: 'A',\r\n    B: 'B',\r\n    C: 'C',\r\n    D: 'D'\r\n}\r\n\r\nexport const playerActionType = {\r\n    HOLD: 'HOLD',\r\n    INVEST: 'INVEST',\r\n    WAIT: 'WAIT'\r\n}\r\n\r\nconst order = new Map([\r\n    // Другие, кроме себя\r\n    [ stepType.A, [\r\n        stepType.B,\r\n        stepType.C,\r\n        stepType.D\r\n    ] ],\r\n    // Все, а тажке D\r\n    [ stepType.B, [\r\n        stepType.A,\r\n        stepType.B,\r\n        stepType.C,\r\n        stepType.D\r\n    ] ],\r\n    [ stepType.C, [\r\n        stepType.A,\r\n        stepType.C\r\n    ] ],\r\n    [ stepType.D, [\r\n        stepType.C\r\n    ] ]\r\n])\r\n\r\nexport const generateNextStep = (prevStepType) => {\r\n    const possibleSteps = order.get(prevStepType)\r\n\r\n    const count = possibleSteps.length\r\n\r\n    return possibleSteps[Math.floor(Math.random() * count)]\r\n}\r\n\r\nexport const stepColors = {\r\n    [stepType.A]: '#6ccc6c',\r\n    [stepType.B]: '#9292ff',\r\n    [stepType.C]: '#ff8c8c',\r\n    [stepType.D]: '#faff7e'\r\n}\r\n\r\nconst generateBool = () => {\r\n    const values = [ true, false ]\r\n\r\n    return values[Math.floor(Math.random() * values.length)]\r\n}\r\n\r\n\r\nlet stepId = 0\r\n\r\nexport function newStep(stepType) {\r\n    const isHidden = generateBool()\r\n\r\n    return {\r\n        id: stepId++,\r\n        type: stepType,\r\n        get stepColor() {\r\n            if (isHidden)\r\n                return 'white'\r\n\r\n            return stepColors[stepType]\r\n        },\r\n        get slotColor() {\r\n\r\n            return stepColors[stepType]\r\n        },\r\n        isHidden\r\n    }\r\n}\r\n\r\n\r\nconst STEP_LIMIT = 3\r\nexport const generateInitSteps = (count = STEP_LIMIT, prevResult = [ newStep(stepType.A) ]) => {\r\n    if (count < 2)\r\n        return prevResult\r\n\r\n    return generateInitSteps(count - 1,\r\n        [ newStep(generateNextStep(prop('type', head(prevResult)))), ...prevResult ]\r\n    )\r\n}","import {complement, isNil} from \"ramda\"\r\n\r\nexport const log = (value) => {\r\n    console.log(value)\r\n    return value\r\n}\r\n\r\nexport const isSomething = complement(isNil)","import React, { useEffect, useRef } from 'react'\r\nimport { path } from 'ramda'\r\n\r\n\r\nconst KEY = 'user'\r\nexport const VALID_TOKEN = 'vr\"(Jwb+Gu.aev7V'\r\n\r\nexport default function Login({ setToken }){\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(KEY)\r\n\r\n        setToken(token)\r\n    })\r\n\r\n    const login = useRef(null)\r\n    const password = useRef(null)\r\n\r\n    const onClick = () => {\r\n        const loginValue = path([ 'current', 'value' ], login)\r\n        const passwordValue = path([ 'current', 'value' ], password)\r\n\r\n        if (loginValue === 'proto' && passwordValue === 'taunt1') {\r\n            localStorage.setItem(KEY, VALID_TOKEN)\r\n            setToken(VALID_TOKEN)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ onClick }>\r\n            <input ref={ login }/>\r\n            <input ref={ password } type=\"password\"/>\r\n            <button type=\"submit\">Войти</button>\r\n        </form>\r\n    )\r\n}","import React, { useReducer, useEffect, useState } from 'react'\nimport { dropLast, head, last, keys, map, range, values, repeat } from \"ramda\"\n\nimport './App.css'\nimport {\n    generateInitSteps,\n    generateNextStep,\n    newStep,\n    playerActionType,\n    playStage,\n    stepColors,\n    stepType\n} from \"./stepLogic\"\nimport { isSomething } from \"./utils\"\nimport Login, { VALID_TOKEN } from \"./Login\"\n\n\nconst WIN_SLOT_COUNT = 5\nconst LOSE_SLOT_COUNT = 3\nconst PREV_SLOT_COUNT_FOR_UPGRADE = 5\n\n\nconst initialState = {\n    steps: generateInitSteps(),\n    playedSteps: [\n        ...repeat({ type: stepType.A }, PREV_SLOT_COUNT_FOR_UPGRADE),\n        ...repeat({ type: stepType.B }, PREV_SLOT_COUNT_FOR_UPGRADE),\n        ...repeat({ type: stepType.C }, PREV_SLOT_COUNT_FOR_UPGRADE),\n        ...repeat({ type: stepType.D }, PREV_SLOT_COUNT_FOR_UPGRADE)\n    ],\n    slots: [],\n    prevSlots: [],\n    lastPlayerActionTypePlayed: playerActionType.WAIT,\n    resource: 0,\n    slotMaximum: 3\n}\n\nfunction App() {\n    // const [ logs, addToLog ] = useReducer((state, newItem) => [ newLog(newItem), ...state ], [])\n    const [ {\n        steps, playedSteps, slots, prevSlots, lastPlayerActionTypePlayed, resource,\n        slotMaximum\n    }, dispatch ] = useReducer(\n        (state, { type }) => {\n            const firstStep = head(state.steps)\n            const lastStep = last(state.steps)\n            const hasUpgrade =\n                state.slots.length === state.slotMaximum &&\n                state.resource >= state.slotMaximum\n\n            const hasBossUpgradeA = state.playedSteps.filter(step => step.type === stepType.A).length >= PREV_SLOT_COUNT_FOR_UPGRADE &&\n                lastStep.type === stepType.A\n            const hasBossUpgradeB = state.playedSteps.filter(step => step.type === stepType.B).length >= PREV_SLOT_COUNT_FOR_UPGRADE &&\n                lastStep.type === stepType.B\n            const hasBossUpgradeC = state.playedSteps.filter(step => step.type === stepType.C).length >= PREV_SLOT_COUNT_FOR_UPGRADE &&\n                lastStep.type === stepType.C\n            const hasBossUpgradeD = state.playedSteps.filter(step => step.type === stepType.D).length >= PREV_SLOT_COUNT_FOR_UPGRADE\n\n            const addedToSlots = [ lastStep, ...state.slots.slice(0, state.slotMaximum - 1) ]\n            const doubleAddedToSlots =\n                [ lastStep, { ...lastStep, id: (lastStep.id + 1000) * -1 }, ...state.slots.slice(0, state.slotMaximum - 2) ]\n\n            switch (type) {\n                case 'onHoldClicked':\n\n                    return {\n                        ...state,\n                        lastPlayerActionTypePlayed: playerActionType.HOLD,\n                        slots: hasBossUpgradeC ? doubleAddedToSlots : addedToSlots,\n                        prevSlots: state.slots,\n                        steps: [ newStep(generateNextStep(firstStep.type)), ...dropLast(1, state.steps) ],\n                        playedSteps: [ ...state.playedSteps, lastStep ]\n                    }\n\n                case 'onInvestClicked':\n\n                    return {\n                        ...state,\n                        lastPlayerActionTypePlayed: playerActionType.INVEST,\n                        slots:\n                            hasBossUpgradeD\n                                ? hasBossUpgradeB\n                                    // TODO: узкое место. Что если камни остаются, то ветер протиснется всё равно?\n                                    ? [ lastStep, ...state.slots.filter(step => step.type === stepType.D) ]\n                                    : state.slots.filter(step => step.type === stepType.D)\n                                : hasBossUpgradeB ? [ lastStep ] : [],\n                        // TODO: перенести в способности\n                        // slots: lastStep.type === stepType.C\n                        //     ? append(lastStep, state.slots.filter(slot => slot.type === stepType.C))\n                        //     : state.slots.filter(slot => slot.type === stepType.C),\n                        prevSlots: state.slots,\n                        steps: [ newStep(generateNextStep(firstStep.type)), ...dropLast(1, state.steps) ],\n                        playedSteps: [ ...state.playedSteps, lastStep ],\n\n                        // hasUpgrade\n                        slotMaximum: hasUpgrade\n                            ? Math.min(state.slotMaximum + 1, WIN_SLOT_COUNT)\n                            : state.slotMaximum,\n                        resource: hasUpgrade ? state.resource - state.slotMaximum : state.resource\n                    }\n\n                case 'onWaitClicked':\n\n                    return {\n                        ...state,\n                        lastPlayerActionTypePlayed: playerActionType.WAIT,\n                        steps: [ newStep(generateNextStep(firstStep.type)), ...dropLast(1, state.steps) ],\n                        slots: hasBossUpgradeB ? addedToSlots : state.slots,\n                        // TODO: перенести в способности\n                        // slots: lastStep.type === stepType.C\n                        //     ? [ lastStep, ...state.slots.slice(0, SLOT_MAXIMUM - 1) ]\n                        //     : state.slots,\n                        prevSlots: state.slots,\n                        playedSteps: [ ...state.playedSteps, lastStep ],\n                        resource: hasBossUpgradeA ? state.resource : state.resource + 1\n                    }\n\n                default:\n                    return state\n            }\n        }, initialState)\n    const [ token, setToken ] = useState('')\n    const isLogged = token === VALID_TOKEN\n\n    const stage = selectStage()\n\n    const onHoldClick = () => {\n        dispatch({ type: 'onHoldClicked' })\n    }\n    const onInvestClick = () => {\n        dispatch({ type: 'onInvestClicked' })\n    }\n    const onWaitClick = () => {\n        dispatch({ type: 'onWaitClicked' })\n    }\n\n    useEffect(() => {\n        isLogged && document.addEventListener('keypress', (e) => {\n            switch (e.key) {\n                case '1':\n                    onHoldClick()\n                    break\n                case '2':\n                    onInvestClick()\n                    break\n                case '3':\n                    onWaitClick()\n                    break\n                default:\n                    break\n            }\n        })\n    }, [ isLogged ])\n\n    const playedStepsInfo = playedSteps.reduce((acc, step) => {\n\n        return { ...acc, [step.type]: acc[step.type] + 1 }\n    }, {\n        [stepType.A]: 0,\n        [stepType.B]: 0,\n        [stepType.C]: 0,\n        [stepType.D]: 0\n    })\n\n    function renderSlots() {\n        const slotsWithEmpties = [ ...slots, ...map(n => ({ id: n, slotColor: 'white' }), range(-5, 0)) ]\n            .slice(0, slotMaximum)\n\n        return slotsWithEmpties.map(slot => (\n            <div\n                key={ slot.id }\n                className=\"slot\"\n                style={ { background: slot.slotColor } }\n            />\n        ))\n    }\n\n    if (!isLogged)\n        return (\n            <Login setToken={ setToken }/>\n        )\n\n    return (\n        <main>\n            <div>\n                <div className=\"steps\">\n                    { steps.map(step => (\n                        <div\n                            key={ step.id }\n                            className=\"step\"\n                            style={ { background: step.stepColor } }\n                        >\n                            { keys(step.items).map(itemId => (\n                                <div key={ itemId }\n                                     className=\"step-item\">{ isSomething(step.items[itemId]) && step.items[itemId] }</div>\n                            )) }\n                        </div>\n                    )) }\n                </div>\n                { stage === playStage.IN_PLAY && (\n                    <div className=\"action-panel\">\n                        <button className=\"action\" onClick={ onHoldClick }>Захватить</button>\n                        <button className=\"action\" onClick={ onInvestClick }>Вложиться</button>\n                        <button className=\"action\" onClick={ onWaitClick }>Ждать</button>\n                    </div>\n                ) }\n                { stage === playStage.WIN && 'ПОБЕДА!' }\n                { stage === playStage.LOSE && 'ПОРАЖЕНИЕ!' }\n                <div className=\"slot-panel\">\n                    { renderSlots() }\n                </div>\n                <div\n                    className=\"played-steps\"\n                >\n                    <div\n                        className=\"played-step played-step_a\"\n                        style={ { background: stepColors[stepType.A] } }\n                    >\n                        { playedStepsInfo[stepType.A] >= 5 ? 'Теперь ЖДАТЬ не приносит ресурс' : playedStepsInfo[stepType.A] }\n                    </div>\n                    <div\n                        className=\"played-step played-step_b\"\n                        style={ { background: stepColors[stepType.B] } }\n                    >\n                        { playedStepsInfo[stepType.B] >= 5 ? 'Теперь СИНИЙ шаг всегда крепится' : playedStepsInfo[stepType.B] }\n                    </div>\n                    <div\n                        className=\"played-step played-step_c\"\n                        style={ { background: stepColors[stepType.C] } }\n                    >\n                        { playedStepsInfo[stepType.C] >= 5 ? 'Теперь КРАСНЫЙ шаг крепится дважды' : playedStepsInfo[stepType.C] }\n                    </div>\n                    <div\n                        className=\"played-step played-step_d\"\n                        style={ { background: stepColors[stepType.D] } }\n                    >\n                        { playedStepsInfo[stepType.D] >= 5 ? 'Теперь ЖЁЛТЫЙ шаг нельзя сбросить' : playedStepsInfo[stepType.D] }\n                    </div>\n                </div>\n                {/*<div className=\"step step_last\"></div>*/ }\n                {/*<div className=\"logs\">*/ }\n                {/*    { logs.map(log => (*/ }\n                {/*        <div key={ log.id }>{ log.text }</div>*/ }\n                {/*    )) }*/ }\n                {/*</div>*/ }\n            </div>\n            <div>\n                <div className=\"player-info\">{ resource }</div>\n            </div>\n        </main>\n    )\n\n    function selectStage() {\n        if (\n            prevSlots.length >= WIN_SLOT_COUNT &&\n            lastPlayerActionTypePlayed === playerActionType.INVEST\n        )\n            return playStage.WIN\n\n        if (values(slots.reduce((acc, slot) => ({ ...acc, [ slot.type ]: acc[ slot.type ] + 1 }), {\n            [ stepType.A ]: 0,\n            [ stepType.B ]: 0,\n            [ stepType.C ]: 0,\n            [ stepType.D ]: 0\n        })).some(count => count >= LOSE_SLOT_COUNT))\n            return playStage.LOSE\n\n        return playStage.IN_PLAY\n    }\n}\n\n\n/*<div className=\"step step_next\"></div>*/\n\n\nexport default App\n\n\n// let logId = 0\n//\n// function newLog(text) {\n//     return {\n//         id: logId++,\n//         text\n//     }\n// }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}