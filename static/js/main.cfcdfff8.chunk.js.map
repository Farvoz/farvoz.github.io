{"version":3,"sources":["Login.jsx","constants.js","startSetup.js","helpers.js","selectors/index.js","utils.js","board/OutcomePanel.jsx","board/PlayerDamagePanel.jsx","board/BossDamagePanel.jsx","board/PlayerActionPanel.jsx","board/StepPanel.jsx","board/Board.jsx","Game.js","serviceWorker.js","index.js","App.js"],"names":["KEY","VALID_TOKEN","Login","setToken","useEffect","token","localStorage","getItem","login","useRef","password","onSubmit","loginValue","path","passwordValue","setItem","ref","type","gameStage","IN_PLAY","WIN","LOSE","gameStageConfig","text","outcomeResult","NOTHING","FILLER","BOSS_ATTACK","PLAYER_ATTACK","outcomeResultConfig","color","gamePhase","PLAYER_ACTION","ACTION_OUTCOME_CHOICE","ACTION_OUTCOME_RESOLVE","gamePhaseConfig","globalId","current","shuffle","generateOutcome","outcomeType","makeOutcome","newOutcome","startPlayerAttackOutcomes","times","startPlayerDefendOutcomes","shuffledStepIds","bossStepsOutcomes","allStartOutcomes","player","maxHP","damageIds","actionIds","boss","application","possibleOutcomeIds","shuffledOutcomeIds","isShowedCurrentStep","openedOutcomeId","outcomes","allIds","DEFAULT_FAILURE_OUTCOME","id","map","prop","byId","reduce","acc","cur","actions","0","outcomeIds","openOutcomeIds","move","1","steps","2","3","4","damages","appendEntity","entity","storage","union","makeDamage","generate","outcomeEffectMap","G","outcome","push","damage","effect","isDisposable","playerMaxHP","playerCurrentHP","length","playerDamageIds","bossMaxHP","bossCurrentHP","bossDamageIds","shuffledOutcomes","isEmpty","attackActionOutcomeIds","attackActionOutcomes","this","playerAttackOutcomeIds","stepOutcomeIds","currentOutcomeIds","playerAttackPossibleOutcomeIds","playerAttackPossibleOutcomes","last","currentOutcomes","defendActionOutcomeIds","bossAttackOutcomes","playerOutcomes","flatMap","selectedOutcomeMaybe","Maybe","fromNullable","currentStepValue","complement","isNil","selectors_","keys","allSelectors","selectorKey","call","OutcomePanel","chooseOutcome","resolveOutcome","phase","throwOff","stage","isShowed","includes","isShowedButtons","fillerOutcomes","i","isVisiblePossibleOutcomes","className","PossibleOutcome","key","isOpened","isVisible","onClick","cn","disabled","style","background","PlayerDamagePanel","BossDamagePanel","PlayerActionPanel","smite","shield","attackOpenedOutcomeIds","AttackActionOutcome","StepPanel","Header","ph","game","Game","setup","ctx","startSetup","random","Shuffle","moves","select","rest","len","events","endPhase","next","chooseAttackOutcome","result","filter","resolveActionOutcome","flow","endGameIf","startingPhase","phases","allowedMoves","onPhaseBegin","onPhaseEnd","dropLast","Client","board","props","gameover","surgeOfEnergy","chooseTriggerOutcome","resolveTriggerOutcome","pass","playerAspects","bossAspects","numPlayers","Boolean","window","location","hostname","match","ReactDOM","render","useState","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cfcdfff8.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\r\nimport { path } from 'ramda'\r\n\r\n\r\nconst KEY = 'user'\r\nexport const VALID_TOKEN = 'vr\"(Jwb+Gu.aev7V'\r\n\r\nexport default function Login({ setToken }){\r\n    useEffect(() => {\r\n        const token = localStorage.getItem(KEY)\r\n\r\n        setToken(token)\r\n    })\r\n\r\n    const login = useRef(null)\r\n    const password = useRef(null)\r\n\r\n    const onClick = () => {\r\n        const loginValue = path([ 'current', 'value' ], login)\r\n        const passwordValue = path([ 'current', 'value' ], password)\r\n\r\n        if (loginValue === 'proto' && passwordValue === 'taunt1') {\r\n            localStorage.setItem(KEY, VALID_TOKEN)\r\n            setToken(VALID_TOKEN)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ onClick }>\r\n            <input ref={ login }/>\r\n            <input ref={ password } type=\"password\"/>\r\n            <button type=\"submit\">Войти</button>\r\n        </form>\r\n    )\r\n}","export const gameStage = {\r\n    IN_PLAY: 'IN_PLAY',\r\n    WIN: 'WIN',\r\n    LOSE: 'LOSE'\r\n}\r\n\r\nexport const gameStageConfig = {\r\n    [ gameStage.IN_PLAY ]: {\r\n        text: ''\r\n    },\r\n    [ gameStage.WIN ]: {\r\n        text: 'Победа!'\r\n    },\r\n    [ gameStage.LOSE ]: {\r\n        text: 'Поражение :('\r\n    }\r\n}\r\n\r\nexport const actionTag = {\r\n    PLAYER_ATTACK: 'PLAYER_ATTACK',\r\n    PLAYER_DEFEND: 'PLAYER_DEFEND'\r\n}\r\n\r\nexport const outcomeResult = {\r\n    NOTHING: 'NOTHING',\r\n    FILLER: 'FILLER',\r\n    BOSS_ATTACK: 'BOSS_ATTACK',\r\n    PLAYER_ATTACK: 'PLAYER_ATTACK'\r\n}\r\n\r\nexport const outcomeResultConfig = {\r\n    [ outcomeResult.NOTHING ]: {\r\n        text: 'Пусто',\r\n        color: 'lightgrey'\r\n    },\r\n    [ outcomeResult.FILLER ]: {\r\n        text: 'Филлер',\r\n        color: 'darkblue'\r\n    },\r\n    [ outcomeResult.BOSS_ATTACK ]: {\r\n        text: 'Босс атакует',\r\n        color: '#ff2fad'\r\n    },\r\n    [ outcomeResult.PLAYER_ATTACK ]: {\r\n        text: 'Игрок атакует',\r\n        color: 'greenyellow'\r\n    }\r\n}\r\n\r\nexport const gamePhase = {\r\n    PLAYER_ACTION: 'PLAYER_ACTION',\r\n    ACTION_OUTCOME_CHOICE: 'ACTION_OUTCOME_CHOICE',\r\n    ACTION_OUTCOME_RESOLVE: 'ACTION_OUTCOME_RESOLVE',\r\n    // TRIGGER_OUTCOME_CHOICE: 'TRIGGER_OUTCOME_CHOICE',\r\n    // TRIGGER_OUTCOME_RESOLVE: 'TRIGGER_OUTCOME_RESOLVE'\r\n}\r\n\r\nexport const gamePhaseConfig = {\r\n    [ gamePhase.PLAYER_ACTION ]: {\r\n        text: 'Ход Игрока'\r\n    },\r\n    [ gamePhase.ACTION_OUTCOME_CHOICE ]: {\r\n        text: 'Выбор исхода действия Игрока'\r\n    },\r\n    [ gamePhase.ACTION_OUTCOME_RESOLVE ]: {\r\n        text: 'Работа с исходами действий Игрока'\r\n    },\r\n    // [ gamePhase.TRIGGER_OUTCOME_CHOICE ]: {\r\n    //     text: 'Выбор исхода эффекта Босса'\r\n    // },\r\n    // [ gamePhase.TRIGGER_OUTCOME_RESOLVE ]: {\r\n    //     text: 'Работа с исходами эффектов Босса'\r\n    // }\r\n}","import { prop, times } from \"ramda\"\r\n\r\nimport { actionTag, outcomeResult } from \"./constants\"\r\nimport { appendEntity, DEFAULT_FAILURE_OUTCOME, makeDamage, makeOutcome } from \"./helpers\"\r\n\r\n\r\n// Начинаем с 1, потому что уже задано по умолчанию Негативное\r\nexport let globalId = {\r\n    current: 1,\r\n    get generate() {\r\n        return globalId.current++\r\n    }\r\n}\r\n\r\nexport function newOutcome(shuffle) {\r\n    const outcomeTypes = [\r\n        outcomeResult.NOTHING,\r\n        outcomeResult.PLAYER_ATTACK\r\n    ]\r\n    const outcomeType = shuffle(outcomeTypes)[0]\r\n\r\n    return makeOutcome(outcomeType)\r\n}\r\n\r\n// function newAspect({ name, tag, actionIds, triggerIds, outcomeCount }, ctx) {\r\n//\r\n//     return {\r\n//         id: globalId.generate,\r\n//         name,\r\n//         tag,\r\n//         actionIds,\r\n//         triggerIds,\r\n//         outcomes: times(() => newOutcome(ctx.random.Shuffle), outcomeCount)\r\n//     }\r\n// }\r\n\r\nexport default function(shuffle) {\r\n    const generateOutcome = () => newOutcome(shuffle)\r\n    const startPlayerAttackOutcomes = times(generateOutcome, 2)\r\n    const startPlayerDefendOutcomes = times(generateOutcome, 2)\r\n\r\n    const shuffledStepIds = shuffle([ 0, 1, 2, 3, 4 ])\r\n\r\n    const bossStepsOutcomes = [\r\n        makeOutcome(outcomeResult.NOTHING),\r\n        makeOutcome(outcomeResult.NOTHING),\r\n        makeOutcome(outcomeResult.NOTHING),\r\n        makeOutcome(outcomeResult.NOTHING),\r\n        makeOutcome(outcomeResult.NOTHING)\r\n    ]\r\n\r\n    const allStartOutcomes = [\r\n        ...startPlayerAttackOutcomes,\r\n        ...startPlayerDefendOutcomes,\r\n        ...bossStepsOutcomes\r\n    ]\r\n\r\n\r\n    return {\r\n        player: {\r\n            maxHP: 5,\r\n            damageIds: [],\r\n            actionIds: [ 0, 1 ]\r\n        },\r\n        boss: {\r\n            maxHP: 5,\r\n            damageIds: []\r\n        },\r\n        application: {\r\n            possibleOutcomeIds: [],\r\n            shuffledOutcomeIds: [],\r\n            shuffledStepIds,\r\n            isShowedCurrentStep: false,\r\n            openedOutcomeId: null\r\n        },\r\n        outcomes: {\r\n            allIds: [ DEFAULT_FAILURE_OUTCOME.id, ...allStartOutcomes.map(prop('id')) ],\r\n            byId: allStartOutcomes.reduce((acc, cur) => ({ ...acc, [ cur.id ]: cur }),\r\n                { [ DEFAULT_FAILURE_OUTCOME.id ]: DEFAULT_FAILURE_OUTCOME })\r\n        },\r\n        actions: {\r\n            allIds: [ 0, 1 ],\r\n            byId: {\r\n                0: {\r\n                    id: 0,\r\n                    text: 'Кара',\r\n                    outcomeIds: startPlayerAttackOutcomes.map(prop('id')),\r\n                    openOutcomeIds: [],\r\n                    move: () => {\r\n                        // Формирование outcomes, следующая фаза\r\n                    }\r\n                },\r\n                1: {\r\n                    id: 1,\r\n                    text: 'Щит',\r\n                    outcomeIds: startPlayerDefendOutcomes.map(prop('id')),\r\n                    openOutcomeIds: [],\r\n                    move: () => {\r\n                        // Формирование outcomes, следующая фаза\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        steps: {\r\n            allIds: [ 0, 1, 2, 3, 4 ],\r\n            byId: {\r\n                0: {\r\n                    id: 0,\r\n                    outcomeIds: [ bossStepsOutcomes[ 0 ].id ]\r\n                },\r\n                1: {\r\n                    id: 1,\r\n                    outcomeIds: [ bossStepsOutcomes[ 1 ].id ]\r\n                },\r\n                2: {\r\n                    id: 2,\r\n                    outcomeIds: [ bossStepsOutcomes[ 2 ].id ]\r\n                },\r\n                3: {\r\n                    id: 3,\r\n                    outcomeIds: [ bossStepsOutcomes[ 3 ].id ]\r\n                },\r\n                4: {\r\n                    id: 4,\r\n                    outcomeIds: [ bossStepsOutcomes[ 4 ].id ]\r\n                }\r\n            }\r\n        },\r\n        damages: {\r\n            allIds: [],\r\n            byId: {}\r\n        }\r\n    }\r\n}","import { union } from \"ramda\"\r\n\r\nimport { globalId } from \"./startSetup\"\r\nimport { outcomeResult } from \"./constants\"\r\n\r\n\r\nexport function appendEntity(entity, storage) {\r\n    storage.allIds = union(storage.allIds, [ entity.id ])\r\n    storage.byId[ entity.id ] = entity\r\n}\r\n\r\nexport function makeDamage() {\r\n\r\n    return {\r\n        id: globalId.generate\r\n    }\r\n}\r\n\r\n// TODO: очищаем разовые\r\n\r\nconst outcomeEffectMap = {\r\n    [ outcomeResult.NOTHING ]: (G) => {},\r\n    [ outcomeResult.FILLER ]: (G) => {\r\n        const outcome = makeOutcome(outcomeResult.BOSS_ATTACK, false)\r\n\r\n        appendEntity(outcome, G.outcomes)\r\n\r\n        G.application.possibleOutcomeIds.push(outcome.id)\r\n    },\r\n    [ outcomeResult.PLAYER_ATTACK ]: (G) => {\r\n        const damage = makeDamage()\r\n        G.boss.damageIds.push(damage.id)\r\n        appendEntity(damage, G.damages)\r\n    },\r\n    [ outcomeResult.BOSS_ATTACK ]: (G) => {\r\n        const damage = makeDamage()\r\n        G.player.damageIds.push(damage.id)\r\n        appendEntity(damage, G.damages)\r\n    }\r\n}\r\n\r\nexport const DEFAULT_FAILURE_OUTCOME = {\r\n    id: 0,\r\n    type: outcomeResult.NOTHING,\r\n    effect: outcomeEffectMap[ outcomeResult.NOTHING ],\r\n    isDisposable: true\r\n}\r\nexport const makeOutcome = (type, isDisposable = true) => ({\r\n    id: globalId.generate,\r\n    type,\r\n    effect: outcomeEffectMap[ type ],\r\n    isDisposable\r\n})","import { isEmpty, isNil, last, times } from \"ramda\"\r\nimport { Maybe } from \"true-myth\"\r\n\r\nimport { DEFAULT_FAILURE_OUTCOME, makeOutcome } from \"../helpers\"\r\nimport { outcomeResult } from \"../constants\"\r\n\r\n\r\nexport default {\r\n    playerMaxHP: (G) => G.player.maxHP,\r\n    playerCurrentHP: (G) => G.player.maxHP - G.player.damageIds.length,\r\n    playerDamageIds: (G) => G.player.damageIds,\r\n\r\n    bossMaxHP:   (G) => G.boss.maxHP,\r\n    bossCurrentHP:   (G) => G.boss.maxHP - G.boss.damageIds.length,\r\n    bossDamageIds: (G) => G.boss.damageIds,\r\n\r\n\r\n    shuffledOutcomes: (G) => {\r\n        if (isEmpty(G.application.shuffledOutcomeIds))\r\n            return [ G.outcomes.byId[ DEFAULT_FAILURE_OUTCOME.id ] ]\r\n\r\n        return G.application.shuffledOutcomeIds.map(id => G.outcomes.byId[ id ])\r\n    },\r\n\r\n    // attack id = 0\r\n    attackActionOutcomeIds: function (G) {\r\n        return G.actions.byId[ G.player.actionIds[ 0 ] ].outcomeIds\r\n    },\r\n    attackActionOutcomes: function(G) {\r\n        return this.attackActionOutcomeIds(G).map(id => G.outcomes.byId[ id ])\r\n    },\r\n    // attackOpenedOutcomeIds: G => G.actions.byId[ G.player.actionIds[ 0 ] ].openOutcomeIds,\r\n    playerAttackOutcomeIds: function (G) {\r\n        const attackActionOutcomeIds = this.attackActionOutcomeIds(G)\r\n        const stepOutcomeIds = this.currentOutcomeIds(G)\r\n\r\n        return [ ...attackActionOutcomeIds, ...stepOutcomeIds ]\r\n    },\r\n    playerAttackPossibleOutcomeIds: (G) => G.application.possibleOutcomeIds,\r\n    playerAttackPossibleOutcomes: function (G) {\r\n        return this.playerAttackPossibleOutcomeIds(G).map(id => G.outcomes.byId[ id ])\r\n    },\r\n\r\n    currentOutcomeIds: G => G.steps.byId[ last(G.application.shuffledStepIds) ].outcomeIds,\r\n    currentOutcomes: function(G) {\r\n        return this.currentOutcomeIds(G).map(id => G.outcomes.byId[ id ])\r\n    },\r\n\r\n    // defend id = 1\r\n    defendActionOutcomeIds: (G) => G.actions.byId[ G.player.actionIds[ 1 ] ].outcomeIds,\r\n\r\n    bossAttackOutcomes: (G) => {\r\n        const playerOutcomes = G.player.actionIds\r\n            .flatMap(id => G.actions.byId[ id ].outcomeIds)\r\n\r\n        return [ ...playerOutcomes ]\r\n    },\r\n\r\n    isShowedCurrentStep: (G) => G.application.isShowedCurrentStep,\r\n\r\n    selectedOutcomeMaybe: G => Maybe.fromNullable(G.outcomes.byId[ G.application.openedOutcomeId ]),\r\n    openedOutcomeId: G => G.application.openedOutcomeId,\r\n\r\n    currentStepValue: (G) => last(G.application.shuffledStepIds)\r\n}","import { complement, isNil, keys } from \"ramda\"\r\n\r\nimport allSelectors from './selectors'\r\n\r\n\r\nexport const log = (value) => {\r\n    console.log(value)\r\n    return value\r\n}\r\n\r\nexport const isSomething = complement(isNil)\r\n\r\nexport const selectors = (G, ...args) => args.map(selector => selector(G))\r\n\r\nexport const selectors_ = (G) => {\r\n\r\n    return keys(allSelectors).reduce((acc, selectorKey) =>\r\n        ({ ...acc, [ selectorKey ]: allSelectors[ selectorKey ].call(allSelectors, G) }), {})\r\n}\r\n\r\nexport const M = {\r\n    // includes: (maybe, array) => maybe.isNothing() ? false : !!array.includes(maybe.unwrapOr(null))\r\n    // includes: (maybe, array) => maybe.isNothing() ? false : just(value => array.includes(value)).ap(maybe)\r\n    includes: (maybe, array) => maybe.map(value => array.includes(value)).unwrapOr(false)\r\n}","import React from \"react\"\r\nimport cn from \"classnames\"\r\nimport { times } from \"ramda\"\r\n\r\nimport { gamePhase, gameStage, outcomeResult, outcomeResultConfig } from \"../constants\"\r\nimport './OutcomePanel.css'\r\nimport { DEFAULT_FAILURE_OUTCOME, makeOutcome } from \"../helpers\"\r\nimport { selectors_ } from \"../utils\"\r\n\r\n\r\nexport default function OutcomePanel({ G, chooseOutcome, resolveOutcome, throwOff, phase, outcomes,\r\n                                         selectedOutcomeMaybe, stage,\r\n                                         openedOutcomeId }) {\r\n    const isShowed = [\r\n        gamePhase.ACTION_OUTCOME_CHOICE,\r\n        gamePhase.ACTION_OUTCOME_RESOLVE,\r\n        // gamePhase.TRIGGER_OUTCOME_CHOICE,\r\n        // gamePhase.TRIGGER_OUTCOME_RESOLVE\r\n    ].includes(phase)\r\n\r\n    const isShowedButtons = [\r\n        gamePhase.ACTION_OUTCOME_RESOLVE,\r\n        // gamePhase.TRIGGER_OUTCOME_RESOLVE\r\n    ].includes(phase)\r\n\r\n    const isEmptyOutcomes = isShowed && (outcomes.length === 1 && outcomes[0].id === DEFAULT_FAILURE_OUTCOME.id)\r\n    const isDisabledThrowOff = isEmptyOutcomes\r\n    const isDisabledNext = false\r\n\r\n    const { playerAttackPossibleOutcomes } = selectors_(G)\r\n    const fillerOutcomes = times(i => makeOutcome(outcomeResult.FILLER), 5 - playerAttackPossibleOutcomes.length)\r\n\r\n    const isVisiblePossibleOutcomes = phase === gamePhase.ACTION_OUTCOME_CHOICE && stage === gameStage.IN_PLAY\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"possible-outcomes-panel\">\r\n                { playerAttackPossibleOutcomes.map(outcome => (\r\n                    <PossibleOutcome\r\n                        key={ outcome.id }\r\n                        isOpened={ outcome.type === outcomeResult.BOSS_ATTACK }\r\n                        isVisible={ isVisiblePossibleOutcomes || outcome.type === outcomeResult.BOSS_ATTACK }\r\n                        { ...outcome }\r\n                    />\r\n                )) }\r\n                { isVisiblePossibleOutcomes ? '+' : '' }\r\n                { fillerOutcomes.map(outcome => (\r\n                    <PossibleOutcome\r\n                        key={ outcome.id }\r\n                        isOpened\r\n                        isVisible={ isVisiblePossibleOutcomes }\r\n                        { ...outcome }\r\n                    />\r\n                ))}\r\n            </div>\r\n                                                        ⇩\r\n            <div className=\"outcome-panel\">\r\n                <div className=\"outcome-panel__container\">\r\n                    { isShowed && outcomes.map((outcome) => {\r\n                        const { id, type } = outcome\r\n                        const isOpened = openedOutcomeId === id\r\n\r\n                        return (\r\n                            <div\r\n                                key={ id }\r\n                                onClick={ () => !isShowedButtons && chooseOutcome(outcome) }\r\n                                className={ cn(\"outcome-card\", {\r\n                                    'outcome-card_player-attack': type === outcomeResult.PLAYER_ATTACK && isOpened,\r\n                                    'outcome-card_boss-attack': type === outcomeResult.BOSS_ATTACK && isOpened,\r\n                                    'outcome-card_nothing': type === outcomeResult.NOTHING && isOpened,\r\n                                    'outcome-card_filler': type === outcomeResult.FILLER && isOpened,\r\n                                    // 'outcome-card_player-attack': type === outcomeResult.PLAYER_ATTACK,\r\n                                    // 'outcome-card_boss-attack': type === outcomeResult.BOSS_ATTACK,\r\n                                    // 'outcome-card_nothing': type === outcomeResult.NOTHING,\r\n                                    // 'outcome-card_filler': type === outcomeResult.FILLER\r\n                                } ) }\r\n                            >{ isOpened ? outcomeResultConfig[ type ].text : '' }</div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                { isShowedButtons && (\r\n                    <div className=\"outcome-panel__buttons\">\r\n                        {/*<button*/}\r\n                        {/*    disabled={ isDisabledThrowOff }*/}\r\n                        {/*    onClick={ () => throwOff(selectedOutcomeMaybe) }*/}\r\n                        {/*>*/}\r\n                        {/*    Сбросить*/}\r\n                        {/*</button>*/}\r\n                        <button\r\n                            disabled={ isDisabledNext }\r\n                            onClick={ resolveOutcome }\r\n                        >\r\n                            Дальше\r\n                        </button>\r\n                    </div>\r\n                ) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction PossibleOutcome({ type, isOpened, isVisible }) {\r\n    if (!isVisible)\r\n        return null\r\n\r\n    if (!isOpened)\r\n        return (\r\n            <div\r\n                className=\"possible-outcome\"\r\n            />\r\n        )\r\n\r\n    return (\r\n        <div\r\n            className=\"possible-outcome\"\r\n            style={ { background: outcomeResultConfig[ type ].color } }\r\n        />\r\n    )\r\n}","import React from \"react\"\r\nimport { times } from \"ramda\"\r\n\r\nimport './PlayerDamagePanel.css'\r\nimport { selectors_ } from \"../utils\"\r\nimport cn from \"classnames\"\r\n\r\n\r\nexport default function PlayerDamagePanel({ G }) {\r\n    const { playerDamageIds } = selectors_(G)\r\n\r\n    return (\r\n        <div className=\"player-damage-panel\">\r\n            { times(i => (\r\n                <div key={ i } className=\"player-damage-slot\">\r\n                    <div className={ cn(\"player-damage-card\", {\r\n                        'player-damage-card_opened': playerDamageIds.length > i\r\n                    }) }/>\r\n                </div>\r\n            ), 5)}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { times } from \"ramda\"\r\nimport cn from 'classnames'\r\n\r\nimport './BossDamagePanel.css'\r\nimport { selectors_ } from \"../utils\"\r\n\r\n\r\nexport default function BossDamagePanel({ G }) {\r\n    const { bossDamageIds } = selectors_(G)\r\n\r\n    return (\r\n        <div className=\"boss-damage-panel\">\r\n            { times(i => (\r\n                <div key={ i } className=\"boss-damage-slot\">\r\n                    <div className={ cn(\"boss-damage-card\", {\r\n                        'boss-damage-card_opened': bossDamageIds.length > i\r\n                    }) }/>\r\n                </div>\r\n            ), 5)}\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\n\r\nimport './PlayerActionPanel.css'\r\nimport { gamePhase, outcomeResultConfig } from \"../constants\"\r\nimport { selectors_ } from \"../utils\"\r\n\r\n\r\nexport default function PlayerActionPanel({\r\n    smite, phase, shield, G\r\n}) {\r\n    const { attackActionOutcomes, attackOpenedOutcomeIds, defendActionOutcomeIds } = selectors_(G)\r\n\r\n    return (\r\n        <div className=\"player-action-panel\">\r\n            <div className=\"player-action\">\r\n                <div className=\"player-action__outcomes\">\r\n                    { attackActionOutcomes.map(outcome => (\r\n                        <AttackActionOutcome\r\n                            key={ outcome.id }\r\n                            outcome={ outcome }\r\n                            // isOpened={ attackOpenedOutcomeIds.includes(outcome.id) }\r\n                            isOpened={ false }\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <button\r\n                    onClick={ smite }\r\n                    disabled={ phase !== gamePhase.PLAYER_ACTION }\r\n                    className=\"player-action-button\"\r\n                >\r\n                    Кара\r\n                </button>\r\n            </div>\r\n            {/*<div className=\"player-action\">*/}\r\n            {/*    <div className=\"player-action__outcomes\">*/}\r\n            {/*        { defendActionOutcomeIds.map(id => (*/}\r\n            {/*            <div key={ id } className=\"player-action__outcome\"/>*/}\r\n            {/*        ))}*/}\r\n            {/*    </div>*/}\r\n            {/*    <button*/}\r\n            {/*        onClick={ shield }*/}\r\n            {/*        disabled={ phase !== gamePhase.PLAYER_ACTION }*/}\r\n            {/*        className=\"player-action-button\"*/}\r\n            {/*    >*/}\r\n            {/*        Щит*/}\r\n            {/*    </button>*/}\r\n            {/*</div>*/}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction AttackActionOutcome({ outcome, isOpened }) {\r\n    if (!isOpened)\r\n        return (\r\n            <div\r\n                className=\"player-action__outcome\"\r\n            />\r\n        )\r\n\r\n    return (\r\n        <div\r\n            className=\"player-action__outcome\"\r\n            style={ { background: outcomeResultConfig[ outcome.type ].color || 'white' } }\r\n        />\r\n    )\r\n}","import React from \"react\"\r\nimport { times } from \"ramda\"\r\nimport cn from 'classnames'\r\n\r\nimport './StepPanel.css'\r\nimport { outcomeResultConfig } from \"../constants\"\r\n\r\n\r\nexport default function StepPanel({ isShowedCurrentStep, currentOutcomes }) {\r\n\r\n    return (\r\n        <div className=\"steps\">\r\n            <div className=\"step\">⇩</div>\r\n            <div className=\"step\">⇩</div>\r\n            <div className=\"step\">⇩</div>\r\n            <div className=\"step\">⇩</div>\r\n            <div className={ cn(\"step\", isShowedCurrentStep && 'step_showed') }>\r\n                { isShowedCurrentStep\r\n                    ? currentOutcomes.map(outcome => (\r\n                        <div\r\n                            key={ outcome.id }\r\n                            className=\"step__outcome\"\r\n                            style={ { background: outcomeResultConfig[ outcome.type ].color || 'white' } }\r\n                        />\r\n                    ))\r\n                    : '?'\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from \"react\"\r\nimport { isNil, keys } from \"ramda\"\r\nimport cn from 'classnames'\r\n\r\nimport './Board.css'\r\nimport { gamePhase, gameStage, gamePhaseConfig, gameStageConfig } from \"../constants\"\r\nimport { selectors_ } from \"../utils\"\r\nimport OutcomePanel from \"./OutcomePanel\"\r\nimport PlayerDamagePanel from \"./PlayerDamagePanel\"\r\nimport BossDamagePanel from \"./BossDamagePanel\"\r\nimport PlayerActionPanel from \"./PlayerActionPanel\"\r\nimport StepPanel from \"./StepPanel\"\r\n\r\n\r\nexport default function Board (props) {\r\n    const { G, ctx, moves } = props\r\n    const stage = isNil(ctx.gameover) ? gameStage.IN_PLAY : ctx.gameover\r\n    const { smite, surgeOfEnergy, chooseAttackOutcome, chooseTriggerOutcome, resolveActionOutcome, pass,\r\n        resolveTriggerOutcome, throwOff, shield } = moves\r\n    const phase = ctx.phase\r\n\r\n    const {\r\n        shuffledOutcomes, isShowedCurrentStep, currentStepValue, playerAspects, selectedOutcomeMaybe,\r\n        playerMaxHP, bossMaxHP, bossAspects, openedOutcomeId, currentOutcomes\r\n    } = selectors_(G)\r\n\r\n    return (\r\n        <div className=\"main-container\" >\r\n            <Header stage={ stage } phase={ phase }/>\r\n            <div className=\"action-panel\">\r\n                <PlayerActionPanel\r\n                    { ...moves }\r\n                    G={ G }\r\n                    phase={ phase }\r\n                />\r\n                <OutcomePanel\r\n                    G={ G }\r\n                    phase={ phase }\r\n                    stage={ stage }\r\n                    chooseOutcome={ phase === gamePhase.ACTION_OUTCOME_CHOICE\r\n                        ? chooseAttackOutcome\r\n                        : chooseTriggerOutcome\r\n                    }\r\n                    resolveOutcome={ phase === gamePhase.ACTION_OUTCOME_RESOLVE\r\n                        ? resolveActionOutcome\r\n                        : resolveTriggerOutcome\r\n                    }\r\n                    outcomes={ shuffledOutcomes }\r\n                    selectedOutcomeMaybe={ selectedOutcomeMaybe }\r\n                    throwOff={ throwOff }\r\n                    openedOutcomeId={ openedOutcomeId }\r\n                />\r\n                <StepPanel\r\n                    isShowedCurrentStep={ isShowedCurrentStep }\r\n                    currentOutcomes={ currentOutcomes }\r\n                />\r\n            </div>\r\n            <div className=\"main-panel\">\r\n                <PlayerDamagePanel G={ G }/>\r\n                <BossDamagePanel G={ G }/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Header({ stage, phase }) {\r\n\r\n    return (\r\n        <header>\r\n            { stage === gameStage.IN_PLAY\r\n                ? keys(gamePhaseConfig).map(ph => ph === phase\r\n                    ? (\r\n                        <div key={ ph } className=\"phase phase_current\">{ gamePhaseConfig[ ph ].text }</div>\r\n                    )\r\n                    : (\r\n                        <div key={ ph } className=\"phase\">{ gamePhaseConfig[ ph ].text }</div>\r\n                    )\r\n                )\r\n                : gameStageConfig[ stage ].text\r\n            }\r\n        </header>\r\n    )\r\n}","import { Game } from \"boardgame.io/core\"\r\nimport { Client } from 'boardgame.io/react'\r\nimport { times, values, dropLast, last, prop, union, take, isNil } from 'ramda'\r\n\r\nimport Board from \"./board/Board\"\r\nimport select from \"./selectors\"\r\nimport startSetup, { globalId, newOutcome } from \"./startSetup\"\r\nimport { outcomeResult, gamePhase, gameStage } from \"./constants\"\r\nimport { appendEntity, makeDamage, makeOutcome } from \"./helpers\"\r\n\r\n\r\nconst PLAYER_DEFEND_TRIGGER_COST = 3\r\n\r\nconst game = Game({\r\n    setup: (ctx) => {\r\n\r\n        return startSetup(ctx.random.Shuffle)\r\n    },\r\n\r\n    moves: {\r\n        smite: (G, ctx) => {\r\n            G.application.possibleOutcomeIds.push(...select.attackActionOutcomeIds(G))\r\n            G.application.possibleOutcomeIds.push(...G.steps.byId[ last(G.application.shuffledStepIds) ].outcomeIds)\r\n\r\n            const outcomeIds = select.playerAttackPossibleOutcomeIds(G)\r\n            const rest = []\r\n            const len = outcomeIds.length\r\n\r\n            if (len < 5) {\r\n                times(() => {\r\n                    const outcome = makeOutcome(outcomeResult.FILLER, false)\r\n                    appendEntity(outcome, G.outcomes)\r\n                    rest.push(outcome.id)\r\n                }, 5 - len)\r\n            }\r\n\r\n            G.application.shuffledOutcomeIds = ctx.random.Shuffle([ ...outcomeIds, ...rest ])\r\n\r\n            ctx.events.endPhase({ next: gamePhase.ACTION_OUTCOME_CHOICE })\r\n        },\r\n        // surgeOfEnergy: (G, ctx) => {\r\n        //     const newOutcomes = times(() => newOutcome(ctx.random.Shuffle), 2)\r\n        //\r\n        //     G.aspects.byId[ 0 ].outcomeIds.push(...newOutcomes.map(prop('id')))\r\n        //     newOutcomes.forEach(outcome => appendEntity(outcome, G.outcomes))\r\n        //\r\n        //     ctx.events.endPhase({ next: gamePhase.PLAYER_ACTION })\r\n        // },\r\n        // shield: () => {\r\n        //\r\n        // },\r\n        chooseAttackOutcome: (G, ctx, result) => {\r\n            G.application.openedOutcomeId = result.id\r\n\r\n            result.effect(G)\r\n            G.application.possibleOutcomeIds = G.application.possibleOutcomeIds.filter(id => id !== result.id)\r\n\r\n            // tryOpenActionOutcomes(\r\n            //     result,\r\n            //     G.actions.byId[ 0 ].openOutcomeIds.map(id => G.outcomes.byId[ id ]),\r\n            //     (outcomeId) => G.actions.byId[ 0 ].openOutcomeIds.push(outcomeId)\r\n            // )\r\n\r\n            ctx.events.endPhase({ next: gamePhase.ACTION_OUTCOME_RESOLVE })\r\n        },\r\n        resolveActionOutcome: (G ,ctx) => {\r\n\r\n            ctx.events.endPhase({ next: gamePhase.PLAYER_ACTION })\r\n        },\r\n        // chooseTriggerOutcome: (G, ctx, result, id) => {\r\n        //     G.application.openedOutcomeId = id\r\n        //\r\n        //     if (result === outcomeResult.FAILURE) {\r\n        //         G.player.currentHP--\r\n        //     }\r\n        //\r\n        //     ctx.events.endPhase({ next: gamePhase.TRIGGER_OUTCOME_RESOLVE })\r\n        // },\r\n        // resolveTriggerOutcome: (_ ,ctx) => {\r\n        //     ctx.events.endPhase({ next: gamePhase.PLAYER_ACTION })\r\n        // },\r\n        // pass: (G, ctx) => {\r\n        //     G.application.isShowedCurrentStep = false\r\n        //\r\n        //     if (G.boss.resourceAccumulation >= PLAYER_DEFEND_TRIGGER_COST) {\r\n        //         ctx.events.endPhase({ next: gamePhase.TRIGGER_OUTCOME_CHOICE })\r\n        //     } else {\r\n        //         ctx.events.endPhase({ next: gamePhase.PLAYER_ACTION })\r\n        //     }\r\n        // },\r\n        // throwOff: (G, ctx, outcomeMaybe) => {\r\n        //     const idOrNull = outcomeMaybe.map(prop('id')).unwrapOr(null)\r\n        //\r\n        //     const aspect = values(G.aspects.byId).find(({ outcomeIds }) =>\r\n        //         outcomeIds.includes(idOrNull))\r\n        //\r\n        //     if (aspect) {\r\n        //         G.aspects.byId[ aspect.id ].outcomeIds = aspect.outcomeIds.filter(id => id !== idOrNull)\r\n        //     }\r\n        //\r\n        //     ctx.events.endPhase({ next: gamePhase.PLAYER_ACTION })\r\n        // }\r\n    },\r\n\r\n    flow: {\r\n        endGameIf: (G) => {\r\n            const { player, boss } = G\r\n\r\n            if (boss.damageIds.length > boss.maxHP)\r\n                return gameStage.WIN\r\n\r\n            if (player.damageIds.length > player.maxHP)\r\n                return gameStage.LOSE\r\n        },\r\n\r\n        startingPhase: gamePhase.PLAYER_ACTION,\r\n        phases: {\r\n            [ gamePhase.PLAYER_ACTION ]: {\r\n                allowedMoves: [ 'smite', 'surgeOfEnergy', 'shield' ]\r\n            },\r\n            [ gamePhase.ACTION_OUTCOME_CHOICE ]: {\r\n                allowedMoves: [ 'chooseAttackOutcome' ],\r\n                onPhaseBegin: (G) => {\r\n                    G.application.isShowedCurrentStep = true\r\n                }\r\n            },\r\n            [ gamePhase.ACTION_OUTCOME_RESOLVE ]: {\r\n                allowedMoves: [ 'resolveActionOutcome', 'throwOff' ],\r\n                onPhaseEnd: (G) => {\r\n                    G.application.openedOutcomeId = null\r\n                    G.application.isShowedCurrentStep = false\r\n                    G.application.shuffledOutcomeIds = []\r\n\r\n                    G.application.possibleOutcomeIds = G.application.possibleOutcomeIds\r\n                        .filter(id => !G.outcomes.byId[ id ].isDisposable)\r\n\r\n                    //TODO: Всякие эффекты по замешиванию\r\n                    G.application.shuffledStepIds = [\r\n                        last(G.application.shuffledStepIds),\r\n                        ...dropLast(1, G.application.shuffledStepIds)\r\n                    ]\r\n                }\r\n            },\r\n            // [ gamePhase.TRIGGER_OUTCOME_CHOICE ]: {\r\n            //     allowedMoves: [ 'chooseTriggerOutcome' ],\r\n            //     onPhaseBegin: (G, ctx) => {\r\n            //         const outcomes = select.bossAttackOutcomes(G)\r\n            //\r\n            //         G.application.shuffledOutcomeIds = ctx.random.Shuffle(outcomes)\r\n            //     }\r\n            // },\r\n            // [ gamePhase.TRIGGER_OUTCOME_RESOLVE ]: {\r\n            //     allowedMoves: [ 'resolveTriggerOutcome', 'throwOff'  ],\r\n            //     onPhaseEnd: (G) => {\r\n            //         G.application.openedOutcomeId = null\r\n            //         G.application.shuffledOutcomeIds = []\r\n            //     }\r\n            // }\r\n        }\r\n    },\r\n})\r\n\r\nlet stepId = 10\r\n// TODO: сделать здесь генерацию шага\r\nfunction makeNewStep(G) {\r\n\r\n    return {\r\n        id: stepId++,\r\n        value: 2\r\n    }\r\n}\r\n\r\n// function tryOpenActionOutcomes(outcome, openedOutcomes, addOpenOutcome) {\r\n//     const hasThisType = openedOutcomes.filter(({ type }) => type === outcome.type).length > 0\r\n//\r\n//     if (hasThisType)\r\n//         return\r\n//\r\n//     addOpenOutcome(outcome.id)\r\n// }\r\n\r\n\r\nexport default Client({\r\n    game,\r\n    board: Board,\r\n    numPlayers: 1\r\n})","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react'\r\n\r\nimport Login, { VALID_TOKEN } from \"./Login\"\r\nimport Game from \"./Game\"\r\n\r\n\r\nexport default function App() {\r\n    const [ token, setToken ] = useState('')\r\n    const isLogged = token === VALID_TOKEN\r\n\r\n    if (!isLogged)\r\n        return (\r\n            <Login setToken={ setToken }/>\r\n        )\r\n\r\n    return (\r\n        <Game />\r\n    )\r\n}"],"sourceRoot":""}